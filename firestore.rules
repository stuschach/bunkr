rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for common validations
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // MESSAGES SECTION - UPDATED WITH IMPROVED RULES
    // Messages with support for sharded collections
    match /messages/{chatId} {
      // Helper function to check if user is a participant
      function isParticipant(chatId, userId) {
        return get(/databases/$(database)/documents/messages/$(chatId)).data.participants[userId] == true || 
               get(/databases/$(database)/documents/messages/$(chatId)).data.participantArray.hasAny([userId]);
      }
      
      // Allow reading if user is a participant
      allow read: if isSignedIn() && (
        resource.data.participants[request.auth.uid] == true ||
        resource.data.participantArray.hasAny([request.auth.uid])
      );
      
      // Allow creation with proper participant data
      allow create: if isSignedIn() && 
        request.resource.data.participants[request.auth.uid] == true &&
        request.resource.data.participantArray.hasAny([request.auth.uid]);
      
      // Allow updates to specific fields
      allow update: if isSignedIn() && 
        (resource.data.participants[request.auth.uid] == true ||
         resource.data.participantArray.hasAny([request.auth.uid])) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'lastMessage', 'updatedAt', 'title', 'isGroupChat', 'participantArray',
          'participants', 'unreadCounters', 'messageCount', 'archivedBy'
        ]);
      
      // Regular thread collection
      match /thread/{messageId} {
        allow read: if isSignedIn() && isParticipant(chatId, request.auth.uid);
          
        allow create: if isSignedIn() && 
          isParticipant(chatId, request.auth.uid) &&
          request.resource.data.senderId == request.auth.uid;
          
        allow update: if isSignedIn() && 
          isParticipant(chatId, request.auth.uid) &&
          (
            (resource.data.senderId == request.auth.uid && 
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deleted', 'content'])) ||
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy'])
          );
          
        allow delete: if isSignedIn() && resource.data.senderId == request.auth.uid;
      }
      
      // Wildcard rule for all sharded thread collections using pattern matching
      match /{threadCollection}/{messageId} {
        allow read: if isSignedIn() && 
          isParticipant(chatId, request.auth.uid) && 
          threadCollection.matches('thread_[0-9]+');
          
        allow create: if isSignedIn() && 
          isParticipant(chatId, request.auth.uid) &&
          request.resource.data.senderId == request.auth.uid &&
          threadCollection.matches('thread_[0-9]+');
          
        allow update: if isSignedIn() && 
          isParticipant(chatId, request.auth.uid) &&
          threadCollection.matches('thread_[0-9]+') &&
          (
            (resource.data.senderId == request.auth.uid && 
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deleted', 'content'])) ||
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy'])
          );
          
        allow delete: if isSignedIn() && 
          resource.data.senderId == request.auth.uid && 
          threadCollection.matches('thread_[0-9]+');
      }
    }
    
    // USER FEEDS
    match /feeds/{userId}/posts/{postId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      allow create: if isSignedIn() && 
                     exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
                     request.resource.data.authorId == 
                     get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.authorId;
      
      allow update: if isSignedIn() && 
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['likes', 'comments', 'likedByUser']);
      
      allow delete: if isSignedIn() && (
                     (exists(/databases/$(database)/documents/posts/$(resource.data.postId)) && 
                      get(/databases/$(database)/documents/posts/$(resource.data.postId)).data.authorId == request.auth.uid) ||
                     isOwner(userId) ||
                     !exists(/databases/$(database)/documents/posts/$(resource.data.postId)) ||
                     (exists(/databases/$(database)/documents/posts/$(resource.data.postId)) &&
                      get(/databases/$(database)/documents/posts/$(resource.data.postId)).data.isDeleted == true)
                    );
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() && 
                    request.auth.uid == userId && 
                    request.resource.data.uid == userId;
      
      allow update: if isSignedIn() && (
        isOwner(userId) || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'unreadNotifications', 'notificationPreferences', 'followerCount', 
          'followingCount', 'displayNameLower', 'fcmTokens'
        ])
      );
      
      allow delete: if isAdmin();
      
      // User's notification settings
      match /settings/notifications {
        allow read: if isSignedIn() && isOwner(userId);
        allow write: if isSignedIn() && isOwner(userId);
      }
      
      // User's notification metrics
      match /metrics/notifications {
        allow read: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && (
          isOwner(userId) || 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['totalCount', 'typeCount', 'lastUpdated'])
        );
      }
      
      // User's rounds/scorecards
      match /rounds/{roundId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's saved courses
      match /favoriteCourses/{courseId} {
        allow read, write: if isOwner(userId);
      }
      
      // UPDATED: User's connections (followers/following) with proper ID format handling
      match /connections/{connectionId} {
        allow read: if isSignedIn();
        
        allow create: if isSignedIn() && (
          // User can create their own following connections 
          (isOwner(userId) && 
           connectionId.matches('following_.*') && 
           request.resource.data.type == 'following' &&
           request.resource.data.userId == connectionId.split('_')[1]) ||
          
          // User can create follower connections in another user's document
          (!isOwner(userId) && 
           connectionId == ('follower_' + request.auth.uid) &&
           request.resource.data.userId == request.auth.uid &&
           request.resource.data.type == 'follower')
        );
        
        allow update: if isSignedIn() && (
          // Owner can update their own connections
          isOwner(userId) || 
          // User can update their follower connection in another user's document
          (connectionId == ('follower_' + request.auth.uid) &&
           request.resource.data.userId == request.auth.uid &&
           request.resource.data.type == 'follower')
        );
        
        allow delete: if isSignedIn() && (
          isOwner(userId) || 
          connectionId == ('follower_' + request.auth.uid)
        );
      }
      
      // User's tee times
      match /teeTimes/{teeTimeId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's saved marketplace listings
      match /savedListings/{listingId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's tournaments
      match /tournaments/{tournamentId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
    }
    
    // Follow records collection
    match /followRecords/{recordId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && recordId.matches(request.auth.uid + '_.*');
    }
    
    // Handicap records
    match /handicapRecords/{recordId} {
      allow read: if isSignedIn() && (
        recordId.matches(request.auth.uid + '_.*') ||
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow write: if isSignedIn() && (
        recordId.matches(request.auth.uid + '_.*') ||
        isAdmin()
      );
    }
    
    // Deletion Records
    match /deletedContent/{recordId} {
      allow create: if isSignedIn() && 
                     (request.resource.data.authorId == request.auth.uid || isAdmin());
      
      allow read: if isSignedIn() && 
                   (resource.data.authorId == request.auth.uid || isAdmin());
      
      allow update, delete: if isAdmin();
    }
    
    // Notifications - UPDATED SECTION
    match /notifications/{notificationId} {
      // Helper function to check if notification type is a valid system type
      function isValidSystemNotification(type) {
        return type == 'handicap-updated' || 
               type == 'tournament-update' || 
               type == 'friend-activity' || 
               type == 'course-review' ||
               type == 'tee-time-approved' ||
               type == 'tee-time-cancelled';
      }
      
      // Read: Only the recipient can read their notifications
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Create: Actor can create, or system can create for specific types
      allow create: if isSignedIn() && (
        // User creating a notification where they are the actor
        (request.resource.data.actorId == request.auth.uid) ||
        
        // System notifications (with validation of types)
        (request.resource.data.actorId == 'system' && 
         isValidSystemNotification(request.resource.data.type))
      );
      
      // Update: Recipient can update (mark as read)
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isRead']);
      
      // Delete: Recipient can delete their notifications
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Delete: Anyone can delete notifications for deleted content
      allow delete: if isSignedIn() && (
        // For deleted posts
        (resource.data.entityType == 'post' && 
         !exists(/databases/$(database)/documents/posts/$(resource.data.entityId))) ||
        
        // For deleted tee times
        (resource.data.entityType == 'tee-time' && 
         !exists(/databases/$(database)/documents/teeTimes/$(resource.data.entityId))) ||
         
        // For deleted rounds
        (resource.data.entityType == 'round' && 
         !exists(/databases/$(database)/documents/scorecards/$(resource.data.entityId)))
      );
    }
    
    // Tournaments
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.creatorId == request.auth.uid || 
        resource.data.admins[request.auth.uid] == true
      );
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Tournament participants
      match /participants/{userId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
        allow delete: if isSignedIn() && (
          userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
      }
      
      // Tournament rounds/scores
      match /rounds/{roundId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          request.resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
        allow delete: if isSignedIn() && (
          resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
      }
    }
    
    // POSTS
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        (resource.data.authorId == request.auth.uid) || 
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'comments', 'likedBy', 'content', 'updatedAt', 'courseName', 'dateTime', 'maxPlayers', 'postType', 'teeTimeId', 'status', 'visibility', 'author', 'isDeleted', 'deletedAt', 'moderationReason']))
      );
      
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && (
          resource.data.authorId == request.auth.uid ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy'])
        );
        allow delete: if isSignedIn() && (
          resource.data.authorId == request.auth.uid || 
          get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
          isAdmin()
        );
      }
    }
    
    // Scorecards
    match /scorecards/{scorecardId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Comments on scorecards
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
      
      // Likes on scorecards
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
    }
    
    // Golf courses
    match /courses/{courseId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() && 
                     request.resource.data.createdBy == request.auth.uid &&
                     request.resource.data.nameTokens is list;
      
      allow update: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        isAdmin()
      );
      
      allow delete: if isAdmin();
      
      // Course reviews
      match /reviews/{reviewId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
      
      // Course tee boxes
      match /teeBoxes/{teeBoxId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          get(/databases/$(database)/documents/courses/$(courseId)).data.createdBy == request.auth.uid ||
          isAdmin()
        );
        allow update: if isSignedIn() && (
          get(/databases/$(database)/documents/courses/$(courseId)).data.createdBy == request.auth.uid ||
          isAdmin()
        );
        allow delete: if isSignedIn() && (
          get(/databases/$(database)/documents/courses/$(courseId)).data.createdBy == request.auth.uid ||
          isAdmin()
        );
      }
      
      // Course holes data
      match /holes/{holeId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          get(/databases/$(database)/documents/courses/$(courseId)).data.createdBy == request.auth.uid ||
          isAdmin()
        );
        allow delete: if isAdmin();
      }
    }
    
    // Groups (looking for players)
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        resource.data.admins[request.auth.uid] == true
      );
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      
      // Group members
      match /members/{memberId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
      }
    }
    
    // Tee Times
    match /teeTimes/{teeTimeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.creatorId == request.auth.uid || 
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentPlayers', 'status', 'updatedAt', 'isDeleted', 'deletedAt']))
      );
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Players subcollection
      match /players/{playerId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          playerId == request.auth.uid || 
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid
        );
        allow update: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
      }
    }
    
    // Tee Time Invitations
    match /tee-time-invitations/{invitationId} {
      allow read: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.invitedUserId == request.auth.uid
      );
      
      allow create: if isSignedIn() && 
        get(/databases/$(database)/documents/teeTimes/$(request.resource.data.teeTimeId)).data.creatorId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.invitedUserId == request.auth.uid
      );
      
      allow delete: if isSignedIn() && resource.data.invitedBy == request.auth.uid;
    }
    
    // Marketplace listings
    match /marketplace/{listingId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        resource.data.sellerId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'saves', 'savedBy']) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
         request.resource.data.status == 'sold')
      );
      
      allow delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin users
    match /admins/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}