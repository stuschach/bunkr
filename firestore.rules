// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for common validations
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
        (data.displayName is string) &&
        (data.email is string) &&
        (data.uid is string) &&
        (data.handicapIndex == null || data.handicapIndex is number) &&
        (data.homeCourse == null || data.homeCourse is string) &&
        (data.profileComplete is bool);
    }
    
    // User profiles - secure user data
    match /users/{userId} {
      // Allow read if signed in
      allow read: if isSignedIn();
      
      // Allow creation if the UID matches the authenticated user
      allow create: if isSignedIn() && 
                    request.auth.uid == userId && 
                    request.resource.data.uid == userId;
      
      // Allow updates if they own the document
      // OR if only updating allowed fields (unreadNotifications, followerCount, followingCount, or notificationPreferences)
      allow update: if isSignedIn() && (
        isOwner(userId) || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['unreadNotifications', 'notificationPreferences', 'followerCount', 'followingCount'])
      );
      
      // Only allow admins to delete user documents
      allow delete: if isAdmin();
      
      // User's rounds/scorecards
      match /rounds/{roundId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's saved courses
      match /favoriteCourses/{courseId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's connections (followers/following)
      match /connections/{connectionId} {
        allow read: if isSignedIn();
        // Allow write if it's your own connection or if you're creating a follow relationship with this user
        allow write: if isSignedIn() && (
          isOwner(userId) || 
          (request.auth.uid == connectionId && 
           (request.resource.data.type == 'follower' || request.resource.data.type == 'following'))
        );
      }
      
      // User's tee times
      match /teeTimes/{teeTimeId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's saved marketplace listings
      match /savedListings/{listingId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's tournaments
      match /tournaments/{tournamentId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
    }
    
    // Notifications
    match /notifications/{notificationId} {
      // Allow read if the notification belongs to the authenticated user
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Allow create by any authenticated user (for system-generated notifications)
      allow create: if isSignedIn() && (
        // Regular user-generated notification
        (request.resource.data.actorId == request.auth.uid) ||
        // System notification (actorId = 'system')
        (request.resource.data.actorId == 'system' && 
         (request.resource.data.type == 'handicap-updated' || 
          request.resource.data.type == 'tournament-update' || 
          request.resource.data.type == 'friend-activity' || 
          request.resource.data.type == 'course-review'))
      );
      
      // Allow update if the notification belongs to the authenticated user
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Allow delete if the notification belongs to the authenticated user
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Tournaments
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.creatorId == request.auth.uid || 
        resource.data.admins[request.auth.uid] == true
      );
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Tournament participants
      match /participants/{userId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
        allow delete: if isSignedIn() && (
          userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
      }
      
      // Tournament rounds/scores
      match /rounds/{roundId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          request.resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
        allow delete: if isSignedIn() && (
          resource.data.userId == request.auth.uid || 
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.creatorId == request.auth.uid ||
          get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.admins[request.auth.uid] == true
        );
      }
    }
    
    // Public posts/feed
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && (
        // Full update by owner
        (resource.data.authorId == request.auth.uid) || 
        // Or just updating allowed fields by any signed-in user
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'comments', 'likedBy', 'content', 'updatedAt', 'courseName', 'dateTime', 'maxPlayers', 'postType', 'teeTimeId', 'status', 'visibility']))
      );
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
    }
    
    // Scorecards - can be shared as posts
    match /scorecards/{scorecardId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Comments on scorecards
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
      
      // Likes on scorecards
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
    }
    
    // Golf courses (public data)
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      
      // Course reviews
      match /reviews/{reviewId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
    }
    
    // Groups (looking for players)
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        resource.data.admins[request.auth.uid] == true
      );
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      
      // Group members
      match /members/{memberId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
      }
    }
    
    // Tee Times
    match /teeTimes/{teeTimeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.creatorId == request.auth.uid || 
        // Allow updating player counts and status by server functions
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentPlayers', 'status', 'updatedAt']))
      );
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Players subcollection
      match /players/{playerId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          playerId == request.auth.uid || 
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid
        );
        allow update: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
      }
    }
    
    // Tee Time Invitations
    match /tee-time-invitations/{invitationId} {
      // Allow read by the inviter or invited user
      allow read: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.invitedUserId == request.auth.uid
      );
      
      allow create: if isSignedIn() && 
        get(/databases/$(database)/documents/teeTimes/$(request.resource.data.teeTimeId)).data.creatorId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.invitedUserId == request.auth.uid
      );
      
      allow delete: if isSignedIn() && resource.data.invitedBy == request.auth.uid;
    }
    
    // Marketplace listings
    match /marketplace/{listingId} {
      // Allow reading for any signed-in user
      allow read: if isSignedIn();
      
      // Allow creation if the user is the seller
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      
      // Allow updates by seller OR for incrementing view count
      allow update: if isSignedIn() && (
        // Owner can update everything
        resource.data.sellerId == request.auth.uid ||
        
        // Any signed-in user can update view count and savedBy array
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'saves', 'savedBy']) ||
        
        // Only changing the status to 'sold'
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
         request.resource.data.status == 'sold')
      );
      
      // Only seller can delete their listing
      allow delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
    
    // Messages
    match /messages/{chatId} {
      // Base chat rules
      allow create: if isSignedIn() && 
                     request.resource.data.participants[request.auth.uid] == true &&
                     request.resource.data.participantArray is list &&
                     request.resource.data.participantArray.hasAny([request.auth.uid]);
      
      // Allow reads if user is in participants map or participantArray
      allow read: if isSignedIn() && 
                   (resource.data.participants[request.auth.uid] == true ||
                    resource.data.participantArray.hasAny([request.auth.uid]));
      
      // Allow updates to specific fields
      allow update: if isSignedIn() && 
                     (resource.data.participants[request.auth.uid] == true ||
                      resource.data.participantArray.hasAny([request.auth.uid])) &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                       'lastMessage', 'updatedAt', 'title', 'isGroupChat', 'participantArray'
                     ]);
      
      // Individual messages in thread
      match /thread/{messageId} {
        // Allow read by any chat participant
        allow read: if isSignedIn() && 
                     (get(/databases/$(database)/documents/messages/$(chatId)).data.participants[request.auth.uid] == true ||
                      get(/databases/$(database)/documents/messages/$(chatId)).data.participantArray.hasAny([request.auth.uid]));
        
        // Allow create if user is a participant and they are the sender
        allow create: if isSignedIn() && 
                       (get(/databases/$(database)/documents/messages/$(chatId)).data.participants[request.auth.uid] == true ||
                        get(/databases/$(database)/documents/messages/$(chatId)).data.participantArray.hasAny([request.auth.uid])) &&
                       request.resource.data.senderId == request.auth.uid;
        
        // Allow updates only for readBy field or soft delete
        allow update: if isSignedIn() && 
                       (get(/databases/$(database)/documents/messages/$(chatId)).data.participants[request.auth.uid] == true ||
                        get(/databases/$(database)/documents/messages/$(chatId)).data.participantArray.hasAny([request.auth.uid])) &&
                       (
                         // Allow sender to soft delete their own message
                         (resource.data.senderId == request.auth.uid && 
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deleted', 'content'])) ||
                         
                         // Allow any participant to mark as read
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                           'readBy'
                         ])
                       );
        
        // Hard delete limited to sender only
        allow delete: if isSignedIn() && resource.data.senderId == request.auth.uid;
      }
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin users
    match /admins/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}