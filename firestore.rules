// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for common validations
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
        (data.displayName is string) &&
        (data.email is string) &&
        (data.uid is string) &&
        (data.handicapIndex == null || data.handicapIndex is number) &&
        (data.homeCourse == null || data.homeCourse is string) &&
        (data.profileComplete is bool);
    }
    
    // User profiles - secure user data
    match /users/{userId} {
      // Allow read if signed in
      allow read: if isSignedIn();
      
      // Allow creation if the UID matches the authenticated user
      allow create: if isSignedIn() && 
                    request.auth.uid == userId && 
                    request.resource.data.uid == userId;
      
      // Allow updates if they own the document
      allow update: if isOwner(userId);
      
      // Only allow admins to delete user documents
      allow delete: if isAdmin();
      
      // User's rounds/scorecards
      match /rounds/{roundId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
      
      // User's saved courses
      match /favoriteCourses/{courseId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's connections (followers/following)
      match /connections/{connectionId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
      
      // User's tee times (updated path to match code)
      match /teeTimes/{teeTimeId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Public posts/feed
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // Allow updating like and comment counts by any signed-in user
      allow update: if isSignedIn() && (
        // Full update by owner
        (resource.data.authorId == request.auth.uid) || 
        // Or just updating allowed fields by any signed-in user
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'comments', 'likedBy', 'content', 'updatedAt', 'courseName', 'dateTime', 'maxPlayers', 'postType', 'teeTimeId', 'status', 'visibility']))
      );
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
    }
    
    // Scorecards - can be shared as posts
    match /scorecards/{scorecardId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Comments on scorecards
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
      
      // Likes on scorecards
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
    }
    
    // Golf courses (public data)
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      
      // Course reviews
      match /reviews/{reviewId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      }
    }
    
    // Groups (looking for players)
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid || 
        resource.data.admins[request.auth.uid] == true
      );
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      
      // Group members
      match /members/{memberId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          resource.data.createdBy == request.auth.uid || 
          resource.data.admins[request.auth.uid] == true ||
          memberId == request.auth.uid
        );
      }
    }
    
    // Tee Times - UPDATED to match code path (camelCase)
    match /teeTimes/{teeTimeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && (
        resource.data.creatorId == request.auth.uid || 
        // Allow updating player counts and status by server functions
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['currentPlayers', 'status', 'updatedAt']))
      );
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Players subcollection
      match /players/{playerId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          playerId == request.auth.uid || 
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid
        );
        allow update: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
        allow delete: if isSignedIn() && (
          get(/databases/$(database)/documents/teeTimes/$(teeTimeId)).data.creatorId == request.auth.uid ||
          playerId == request.auth.uid
        );
      }
    }
    
    // Keep the old path temporarily for backward compatibility
    match /tee-times/{teeTimeId} {
      allow read: if isSignedIn();
      allow write: if false; // Disable writes to the old path
    }
    
    // Tee Time Players - keeping this rule for backward compatibility
    match /tee-time-players/{teeTimePlayerId} {
      allow read: if isSignedIn();
      allow write: if false; // Disable writes to the old collection
    }
    
    // User Tee Times (for quick lookups) - keeping this rule for backward compatibility
    match /user-tee-times/{userId}/{teeTimeId} {
      allow read: if isOwner(userId);
      allow write: if false; // Disable writes to the old collection
    }
    
    // Tee Time Invitations
    match /tee-time-invitations/{invitationId} {
      // Allow read by the inviter or email recipient
      allow read: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.email == request.auth.token.email
      );
      
      // Update path reference to match code
      allow create: if isSignedIn() && 
        get(/databases/$(database)/documents/teeTimes/$(request.resource.data.teeTimeId)).data.creatorId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.email == request.auth.token.email
      );
      
      allow delete: if isSignedIn() && resource.data.invitedBy == request.auth.uid;
    }
    
    // Marketplace listings
    match /marketplace/{listingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
    
    // Messages
    match /messages/{chatId} {
      allow create: if isSignedIn() && 
        (request.resource.data.participants[request.auth.uid] == true);
      allow read: if isSignedIn() && resource.data.participants[request.auth.uid] == true;
      
      // Individual messages
      match /thread/{messageId} {
        allow read: if isSignedIn() && get(/databases/$(database)/documents/messages/$(chatId)).data.participants[request.auth.uid] == true;
        allow create: if isSignedIn() && 
          get(/databases/$(database)/documents/messages/$(chatId)).data.participants[request.auth.uid] == true &&
          request.resource.data.senderId == request.auth.uid;
        allow update: if false; // Messages cannot be edited
        allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId;
      }
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin users
    match /admins/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}